Pawn
Pawn (прежнее название — Small)[1] — простой, не типизированный 32-битный скриптовый язык программирования с синтаксисом, подобным языку Си. Компилятор генерирует P-код (или байт-код), запускаемый на абстрактной машине. 
Файлы исходного кода Pawn имеют расширение .pwn. Скомпилированные и готовые к исполнению файлы получают расширение .amx.
История языка
Введение в язык Pawn и в понятие абстрактной машины было описано как перспектива программистов, и опубликовано в журнале доктора Добба в октябре 1999 года. 
Язык был разработан для начинающих программистов, которые допускали множество ошибок, связанных с освобождением памяти компьютера.

Основой для Pawn был взят язык Си. Целью разработчиков было упростить и изменить язык Си таким образом, чтобы синтаксис языка позволял избегать или обходить те ошибки, которые допускают неопытные программисты. Выбор языка Си определило то, что этот язык в тот момент достиг максимума своего развития и был довольно популярен.
Особенности языка
Pawn — это Си-подобный скриптовый язык.
Вы можете подключать файлы(include) в Pawn, так что вы сможете организовать аккуратную структуру Pawn кода.
Pawn — это скриптовый язык с компилятором, который выполняет статические проверки, и с абстрактной машиной, которая (статически) выполняет верификацию P-кода и динамическую проверку.
С целью портирования, Pawn был написан на ANSI C.
Pawn поддерживает Unicode/UCS-4 и UTF-8, а также кодовые страницы. Компилятор может преобразовать введённый исходный код в особую кодовую страницу Unicode; он также поддерживает файлы исходного кода в кодировке UTF-8.
Он был установлен на микроконтроллеры Atmel ATmega128, Philips LPC2138 и LPC2106 (ядро ARM7TDMI с 32 КБ ОЗУ), а также на Texas Instrument MSP430F1611 (ядро MSP430 с 10 КБ оперативной памяти и 48 КБ Flash ROM). Pawn позволяет запускать большие скрипты с небольшим объёмом памяти.
Документирование исходного кода может быть сделано с помощью «комментариев документации»; компилятор Pawn извлекает эти комментарии, объединяет их с информацией из исходного кода и записывает в XML-файл, который можно просмотреть (и распечатать) с помощью веб-браузера.
Pawn поддерживает состояния и автоматы, включая переменные локальных состояний.
Арифметика
Основные элементы большинства программ - вычисления, решения (условное выполнение), итерации (циклов), и переменные для хранения входных данных, выходных данных и промежуточных результатов. В следующем примере программа иллюстрирует многие из этих понятий. Программа вычисляет наибольший общий делитель двух значений с помощью алгоритма, изобретенный Евклидом.
Массивы и константы
Наряду с простыми переменными, размером в одну ячейку, pawn поддерживает "массив переменных", которые содержат много пар ячейка / значение. В следующем примере программа отображает ряд простых чисел, используя хорошо известный алгоритм построения "решета Эратосфена". Программа также вводит еще новую концепцию: символические константы. Символьные константы похожи на переменные, но они не могут быть изменены.
Функции
Большие программы разделяют отдельные задачи и операции в функции. Использование функций повышает модульность программ и функций, когда хорошо написаны, портируемы в другие программы. В следующем примере реализуется функция для вычисления чисел из ряда Фибоначчи. Последовательность Фибоначчи была открыта Леонардо Фибоначчи из Пизы, итальянский математик 13 века, чьим величайшим достижением было популяризация для западного мира Хинду-арабских цифр. Цель последовательности была описать рост популяции (идеализированных) кроликов; и последовательность 1, 1, 2, 3, 5, 8, 13, 21,. , , (каждое следующие значение является суммой двух предыдущих).
Рациональные числа
Все расчеты, сделанные до этого момента, использовали только целые числа. Pawn также имеет поддержку для чисел, которые могут вместить дробные значения: они называются "рациональными числами". Тем не менее, включена ли эта поддержка зависит от хост-приложения. Рациональные числа могут быть реализованы либо как с плавающей точкой или числа с фиксированной точкой. Арифметика с плавающей точкой обычно используется для общего назначения и научных расчетов, в то время как арифметика с фиксированной точкой больше подходит для финансовой обработки и применения, где ошибки округления не должны вступать в игру (или, по крайней мере, они должны быть предсказуемыми). Pawn инструментарий имеет модуля для работы и с плавающей точкой и с фиксированной запятой. Детали для этих модулей можно найти в соответствующей документации. Однако, хост может реализовать модуль для работы либо с плавающей точкой или фиксированной точкой, или оба, или не то и не другое Ниже программа требует, чтобы по крайней мере один вид рациональных чисел поддерживался; иначе она не будет работать, если хост-приложение не поддерживает рациональные числа в принципе.
Строки
Pawn не имеет встроенного типа "строка"; символьные строки хранятся в массивах, с конвенцией, что элемент массива за последним действительным символом равен нулю. Поэтому работа со строками эквивалентна работе с массивами. Программа ниже разделяет строку текста на отдельные слова и считает их количество. Это простая программа показывает возможности языка Pawn.
Массивы и символьные индексы (структурированные данные)
В бестиповом языке, мы могли бы назначить другую цель некоторых элементов массива, в сравнении другими элементами в одном массиве. Pawn поддерживает символические индексы, позволяющие назначить конкретные имена тегов или диапазоны для отдельных элементов массива. Пример для иллюстрации символических индексов и массивов больше, чем в предыдущие Pawn программы, и этот пример показывает несколько других особенностей языка, таких как глобальные переменные и именованные параметры.
